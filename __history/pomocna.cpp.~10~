//---------------------------------------------------------------------------

#pragma hdrstop

#include "pomocna.h"
#include <iostream>
#include "pomocna.h"

#include <vcl.h>

#include "Aplikacija.h"
#include <algorithm>
#include "pomocna.h"
#include <string>
#include <utility>
//---------------------------------------------------------------------------

bool operator<(Tacka A, Tacka B) {
    if(A.x < B.x)
        return true;
    else if(A.x > B.x)
        return false;
    return A.y < B.y;
}

//---------------------------------------------------------------------------

bool operator==(Tacka A, Tacka B) {
	return A.x == B.x && A.y == B.y;
}

//---------------------------------------------------------------------------

void Tacka::Crtaj(TImage* Slika, TColor boja) {
	int velicina = 3;
	Slika->Canvas->Brush->Color = boja;
	Slika->Canvas->Ellipse(x-velicina, y-velicina, x+velicina, y+velicina);
	Slika->Canvas->Brush->Color = clWhite;
}

//---------------------------------------------------------------------------

void Duz::Crtaj(TImage* Slika, TColor boja) {
	Slika->Canvas->Pen->Color = boja;
	Slika->Canvas->MoveTo(A.x, A.y);
	Slika->Canvas->LineTo(B.x, B.y);
	Slika->Canvas->Pen->Color = clBlack;
}

//---------------------------------------------------------------------------

bool Duz::horizontalna() {
	return A.y == B.y;
}
//---------------------------------------------------------------------------

bool Duz::vertikalna() {
	return A.x == B.x;
}

//---------------------------------------------------------------------------

int Orijentacija(Tacka A, Tacka B, Tacka C) {
    double povrsina = A.x * (B.y - C.y) + B.x * (C.y - A.y) + C.x * (A.y - B.y);
    if (povrsina > 0)
        return -1;
    else if (povrsina < 0)
        return 1;
    else
        return 0;
}

//---------------------------------------------------------------------------

bool daLiSeDuziSijeku(Duz d1, Duz d2) {
    bool uslov1 = Orijentacija(d1.A, d1.B, d2.A) != Orijentacija(d1.A, d1.B, d2.B);
    bool uslov2 = Orijentacija(d2.A, d2.B, d1.A) != Orijentacija(d2.A, d2.B, d1.B);

    return uslov1 && uslov2;
}

Tacka presjekPravih(Duz d1, Duz d2) {
	// Line AB represented as a1x + b1y = c1
	Tacka A = d1.A, B=d1.B;
	Tacka C = d2.A, D=d2.B;

	double a1 = B.y - A.y;
	double b1 = A.x - B.x;
	double c1 = a1*(A.x) + b1*(A.y);

    // Line CD represented as a2x + b2y = c2
	double a2 = D.y - C.y;
	double b2 = C.x - D.x;
	double c2 = a2*(C.x)+ b2*(C.y);

    double determinant = a1*b2 - a2*b1;

    if (determinant == 0)
    {
		// The lines are parallel. This is simplified
		// by returning a pair of FLT_MAX
        throw "Prave se ne sijeku!";
	}
	else
    {
        double x = (b2*c1 - b1*c2)/determinant;
        double y = (a1*c2 - a2*c1)/determinant;
		return Tacka(x, y);
	}
}

//---------------------------------------------------------------------------

bool daLiJeTackaUTrouglu(Tacka T, Trougao tr) {
	int o1 = Orijentacija(tr.A, tr.B, T);
    int o2 = Orijentacija(tr.B, tr.C, T);
    int o3 = Orijentacija(tr.C, tr.A, T);

    return (o1 == o2) && (o2 == o3);
}




//---------------------------------------------------------------------------

bool daLiJeTackaUKruznici(const Tacka& P, const Kruznica& K){
	double dx = P.x - K.centar.x;
	double dy = P.y - K.centar.y;
	double udaljenost = sqrt(dx * dx + dy * dy);
	return udaljenost <= K.r;

}

int brojTacakaUKruznici(const vector<Tacka>& tacke, const Kruznica& K){
	int brojac = 0;
	for(const Tacka& T : tacke)
		if (daLiJeTackaUKruznici(T, K)) {
			brojac++;
		}
	return brojac;
}

void Kruznica::Crtaj(TImage* Slika, TColor boja){
	Slika->Canvas->Pen->Color = boja;
	Slika->Canvas->Ellipse(centar.x-r, centar.y-r, centar.x+r, centar.y+r);
	Slika->Canvas->Pen->Color = clWhite;
}

bool mycompare(pair<double,bool> A, pair<double,bool> B)
{
    if(A.first<B.first)
        return true;
    else if(A.first>B.first)
        return false;
    else
        return (A.second==1);
}
#pragma package(smart_init)
