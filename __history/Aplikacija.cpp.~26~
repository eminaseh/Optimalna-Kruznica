//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Aplikacija.h"
#include <algorithm>
#include "pomocna.h"
#include <string>
#include <utility>
#include <list>
#include <queue>
#include <set>
#include <vector>
#include <cmath>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
    Slika->Canvas->Brush->Color = clWhite;
	Slika->Canvas->FillRect(Rect(0, 0, Slika->Width, Slika->Height));
}

//---------------------------------------------------------------------------

void __fastcall TForm1::SlikaMouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{
	Tacka nova(X,Y);
	tacke.push_back(nova);
	nova.Crtaj(Slika);
}


//---------------------------------------------------------------------------

void __fastcall TForm1::DugmeOcistiClick(TObject *Sender)
{
    Slika->Canvas->Brush->Color = clWhite;
	Slika->Canvas->FillRect(Rect(0, 0, Slika->Width, Slika->Height));
    Slika->Canvas->Brush->Color = clBlack;
	Slika->Canvas->FrameRect(Rect(0, 0, Slika->Width, Slika->Height));
	Slika->Canvas->Brush->Color = clWhite;

	tacke.clear();
	kruznice.clear();

}
//---------------------------------------------------------------------------

void __fastcall TForm1::DugmeGenerisiRandomTackeClick(TObject *Sender)
{
	int broj_tacaka = InputBrojTacakaRandom->Text.ToInt();

	for(int i = 0 ; i < broj_tacaka; i++) {
		tacke.push_back(Tacka(rand() % Slika->Width, rand() % Slika->Height));
		tacke[tacke.size()-1].Crtaj(Slika);
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm1::SlikaMouseMove(TObject *Sender, TShiftState Shift, int X,
          int Y)
{
    string koordinate = "X: " + to_string(X) + " Y: " + to_string(Y);
	TextKoordinate->Text = koordinate.c_str();
}

//---------------------------------------------------------------------------

void __fastcall TForm1::DugmeOptimalnaKruznicaClick(TObject *Sender)
{
   // r je poluprečnik koji se učitava iz Edit polja za unošenje poluprečnika.
   double r = InputPoluprecnik->Text.ToInt();
   // maxBrTacakaUKruznici služi za praćenje maksimalnog broja tačaka u kružnici .
   int maxBrTacakaUKruznici = 1;
   // n je veličina vektora tačke.
   int n = tacke.size();
   // optimalnaKruznica služi za praćenje najoptimalnije kružnice.
   Kruznica optimalnaKruznica(Tacka(0,0),r);

   // Za svaki par tačaka nalazimo optimalnu kružnicu na čijem se rubu one nalaze.
   for(int i = 0; i < n; i++){
	for(int j = 0; j < n; j++){
		if( i != j) {
			// Udaljenost izmedju tačaka
			double dx = tacke[j].x - tacke[i].x;
			double dy = tacke[j].y - tacke[i].y;
			double dist = sqrt(dx * dx + dy * dy);

			// Sve tačke čija je udaljenost > 2r preskačemo
			if (dist <= 2 * r) {

				// Koordinate sredine izmedju tačaka
				// Računamo ih tako što uzimamo prosječnu vrijednost x i y koordinata tačaka
				double midX = (tacke[i].x + tacke[j].x) / 2;
				double midY = (tacke[i].y + tacke[j].y) / 2;

				// dx i dy predstavlaju komponente normalizovanog vektora.
				dx /= dist;
				dy /= dist;

				// h je udaljenost od srednje tačke do centra  kružnice
                // r^2 = (dist/2)^2 + h^2
				double h = sqrt(r * r - (dist / 2) * (dist / 2));

				// Vektor (-dy,dx) je okomit na (dx,dy) i omogućava da izračunamo
				// centar kružnice
				// Pravimo kružnicu i računamo broj tačaka u kružnici
				Kruznica K(Tacka(midX + h * (-dy),midY + h * dx),r);

				int brojac = brojTacakaUKruznici(tacke,K);

				// Ako je broj tacaka u kružnici veći od dosadašnjeg najvećeg
				// broja tačaka, ažuriramo varijablu maxBrTacakaUKruznici
				// i ažuriramo optimalnu kružnicu.
				if (brojac > maxBrTacakaUKruznici) {
					maxBrTacakaUKruznici = brojac;
					optimalnaKruznica = K;
				}
			}
		}

	}
   }

   optimalnaKruznica.Crtaj(Slika);

   // Prilikom iscrtavanja kruznice, njena unutrasnjost se ispuni nekom bojom
   // zbog cega je potrebno ponovo iscrtati tacke
   for(Tacka& T : tacke)
	T.Crtaj(Slika);
}


//---------------------------------------------------------------------------


void __fastcall TForm1::DugmeOptimalnaKruznicaBrzoClick(TObject *Sender)
{
   // r je poluprečnik koji se učitava iz Edit polja za unoženje poluprečnika.
   double r = InputPoluprecnik->Text.ToInt();
   // maxBrTacakaUKruznici služi za praćenje maksimalnog broja tačaka u kružnici .
   int maxBrTacakaUKruznici = 1;
   // n je veličina vektora tačke.
   int n = tacke.size();
   // optimalnaKruznica služi za praćenje najoptimalnije kružnice.
   Kruznica optimalnaKruznica(Tacka(0,0),r);

   // Za svaku tačku pronalazimo njenu optimalnu kružnicu tako što računamo
   // maksimalan broj tačaka koje se mogu naći u kružnici poluprečnika r koju
   // rotiramo oko te tačke.
   // Ako pronađemo kružnicu koja sadrži više tačaka od trenutne globalo optimalne
   // kružnice, ažuriramo najoptimalniju kružnicu.
   for(int i = 0; i < n; i++){
		// Vektor uglovi čuva parove vrijednosti uglova rotacije i bool
		// Prva komponenta para je double i čuva alpha i beta vrijednosti.
		// alpha predstavlja vrijednost ugla za koji tačka ulazi u kružnicu
		// i za njega je druga komponenta para, bool, jednaka true .
		// beta predstavlja vrijednost ugla za koji tačka izlazi iz kružnice
		// i za njega je druga komponenta para, bool, jednaka false .
		vector<pair<double, bool>> uglovi;

		// Za svaku tačku i računamo kolika je njena udaljenost od svih ostalih tačaka
		for(int j = 0; j < n; j++){
			if(i != j){

				double dx = tacke[j].x - tacke[i].x;
				double dy = tacke[j].y - tacke[i].y;
				double dist = sqrt(dx * dx + dy * dy);

				// Ukoliko je udaljenost između tačaka tacke[i] i tacke[j] veća od 2*r
				// ne može se formirati kružnica poluprečnika r pa gledamo
				// samo tačke čija je udaljenost <= 2*r.
				if(dist <= 2*r) {
				// A je ugao između duži čije su krajnje tačke tacke[i] i tacke[j] i x-ose.
				// Računa se po formuli
				// A = tan^-1( (tacke[i].y - tacke[i].y) / (tacke[j].x - tacke[i].x) ).
				double A = atan2(dy,dx);
				// B je ugao između duži čije su krajnje tačke tacke[i] i centar kružnice
				// i duži čije su krajnje tačke tacke[i] i tacke[j]
				// Računa se po formuli B = cos ^-1(dist/(2*r)) .
				double B = acos(dist / (2 * r));

				// alpha predstavlja vrijednost ugla za koji tačka ulazi u kružnicu.
				double alpha = A-B;
				// beta predstavlja vrijednost ugla za koji tačka izlazi iz kružnice.
				double beta = A+B;

				// Popunimo vektor uglovi.
				uglovi.push_back(make_pair(alpha, true));
				uglovi.push_back(make_pair(beta, false));

				}

			}
		}

		// Sortiramo vektor uglovi.
		sort(uglovi.begin(), uglovi.end());
		// brojac se koristi za računanje trenutnog broja tačaka u kružici.
		int brojac = 1;

		// Prolazimo kroz sortirani vektor uglovi u rastućem poretku.
		// Povećavamo brojač za 1 svaki put kada tačka uđe u kružnicu.
		// Smanjujemo brojač za 1 svaki put kada tačka izađe iz kružnice.
		// Druga komponenta u vektoru parova, bool, nam govori o tome da li je
		// ugao ulazni ili izlazni.
		for(auto it = uglovi.begin(); it!= uglovi.end(); it++){
			// Ako je ugao ulazni, povećavamo brojač.
			if((*it).second)
				brojac++;
			else // Ako je ugao izlazni, smanjujemo brojač.
				brojac--;

			// Ako je trenutni broj tačaka veći od dosadašnjeg najvećeg broja tačaka
			// ažuriraju se maxBrTacakaUKruznici i optimalnaKružnica.
			if (brojac > maxBrTacakaUKruznici) {
			maxBrTacakaUKruznici = brojac;

			// Centar kružnice (x,y) se računa pomoću formula za pretvaranje
			// polarnih koordinata u Kartezijeve koordinate
			// x = r * cos(ugao) i y = r * sin(ugao)
			double centarX = tacke[i].x + r * cos((*it).first);
			double centarY = tacke[i].y + r * sin((*it).first);


			optimalnaKruznica = Kruznica(Tacka(centarX,centarY), r);

			}
		}



   }

   // Iscrtava globalno najoptimalniju kružnicu.
   optimalnaKruznica.Crtaj(Slika);

   // Prilikom iscrtavanja kružnice, njena unutrašnjost se ispuni nekom bojom
   // zbog čega je potrebno ponovo iscrtati tačke.
   for(Tacka& T : tacke)
	T.Crtaj(Slika);



}
//---------------------------------------------------------------------------

